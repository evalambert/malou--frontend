---
// src/layouts/AllProjectsLists.astro
import fetchApi from '../assets/scripts/lib/strapi.js';
import { fetchSortedCategory } from '../assets/scripts/lib/sortedData.js';
import { pageState } from '../assets/scripts/lib/store.js';


import Nav from './Nav.jsx';
import PaintingsList from './projects-lists/PaintingsList.jsx';
import VitrailList from './projects-lists/VitrailList.jsx';
import VolumesList from './projects-lists/VolumesList.jsx';
import PoetryList from './projects-lists/PoetryList.jsx';
import WeavingList from './projects-lists/WeavingList.jsx';

const { lang, enterIndex} = Astro.props;

const currentPath = Astro.url.pathname || '';
const categoryMatch = currentPath.match(/^\/[a-z]{2}\/([^\/]+)/);
/* const categoryClass = categoryMatch ? `${categoryMatch[1]}` : ''; */

const { homepageItems: homepageVolumes, hiddenItems: hiddenVolumes } =
    await fetchSortedCategory({
        category: 'volumes',
        homepageKey: 'volumes',
        lang,
    });

const { homepageItems: homepageVitraux, hiddenItems: hiddenVitraux } =
    await fetchSortedCategory({
        category: 'vitrails',
        homepageKey: 'vitrails',
        lang,
    });

const { homepageItems: homepagePaintings, hiddenItems: hiddenPaintings } =
    await fetchSortedCategory({
        category: 'paintings',
        homepageKey: 'paintings',
        lang,
    });

const { homepageItems: homepageWeavings, hiddenItems: hiddenWeavings } =
    await fetchSortedCategory({
        category: 'weavings',
        homepageKey: 'weavings',
        lang,
    });

const poetries = await fetchApi({
    endpoint: 'poetries?populate=*',
    wrappedByKey: 'data',
    locale: lang,
});

// ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
// Store pageState au changement d'url (home, about, catégorie)
function getPageState(currentPath) {
    const match = currentPath.match(/^\/[a-z]{2}\/?$/);
    if (match) return 'home';
    const catMatch = currentPath.match(/^\/[a-z]{2}\/([^\/]+)(?:\/|$)/);
    if (catMatch) return catMatch[1];
    return null;
}
const state = getPageState(currentPath);

// ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••

export const prerender = true;
---

<div class={`header-wrapper w-full md:flex justify-between gap-x-[20px]`}>
    <div class='md:flex-1'>
        <Nav
            className={`z-50 mix-blend-target ${
                Astro.url.pathname === `/${lang}/about/`
                    ? 'md:fixed'
                    : 'relative'
            }`}
            lang={lang}
            currentPath={Astro.url.pathname}
            transition:name='nav'
            transition:persist
            client:only='react'
        />
    </div>
    <div class='md:flex-3 cat-volume-flex-wrapper'>
        <VolumesList
            className='relative z-50 mix-blend-target'
            targetHref={currentPath}
            state={state}
            lang={lang}
            homepageVolumes={homepageVolumes}
            hiddenVolumes={hiddenVolumes}
            transition:name='volumeslist'
            transition:persist
            client:only='react'
        />
    </div>
    <div class='cat-vitrail-flex-wrapper md:flex-1'>
        <VitrailList
            className='relative z-50 mix-blend-target'
            targetHref={currentPath}
            state={state}
            lang={lang}
            homepageVitraux={homepageVitraux}
            hiddenVitraux={hiddenVitraux}
            transition:name='vitrailist'
            transition:persist
            client:only='react'
        />
    </div>
</div>
<PoetryList
    className='mix-blend-target'
    targetHref={currentPath}
    state={state}
    lang={lang}
    dataPoetry={poetries}
    transition:name='poetrylist'
    transition:persist
    client:only='react'
/>
<PaintingsList
    className='relative md:fixed max-md:top-[50vh] md:bottom-0 z-50 mix-blend-target'
    targetHref={currentPath}
    state={state}
    lang={lang}
    homepagePaintings={homepagePaintings}
    hiddenPaintings={hiddenPaintings}
    transition:name='paintingslist'
    transition:persist
    client:only='react'
/>
<WeavingList
    className='z-50 mix-blend-target'
    targetHref={currentPath}
    state={state}
    lang={lang}
    homepageWeavings={homepageWeavings}
    hiddenWeavings={hiddenWeavings}
    transition:name='weavinglist'
    transition:persist
    client:only='react'
/>
