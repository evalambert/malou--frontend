---
//pages/[lang]/vitrail/[slug].astro

import fetchApi from '../../../assets/scripts/lib/strapi.js';

import Layout from '../../../layouts/Layout.astro';
import AllProjectsLists from '../../../layouts/AllProjectsLists.astro';
import PreviewImg from '../../../components/features/preview-image/PreviewImg.jsx';
import AccordionReadProject from '../../../components/features/accordion-project/AccordionReadProject.jsx';
import Slider from '../../../components/features/slider/Slider.jsx';
import ZoomModale from '../../../components/features/slider/ZoomModale.jsx';

export async function getStaticPaths() {
    const languages = ['fr', 'en'];
    const paths = [];

    for (const lang of languages) {
        try {
            const vitraux = await fetchApi({
                endpoint: 'vitrails?populate=*',
                wrappedByKey: 'data',
                locale: lang,
            });

            if (!Array.isArray(vitraux)) {
                console.error(
                    'Les données reçues ne sont pas un tableau:',
                    vitraux
                );
                continue;
            }

            const langPaths = vitraux.map((vitrail) => ({
                params: {
                    lang,
                    slug: vitrail.slug,
                },
                props: { vitrail },
            }));

            paths.push(...langPaths);
        } catch (error) {
            console.error(`Error fetching vitraux for ${lang}:`, error);
        }
    }
    return paths;
}

const { vitrail } = Astro.props;
const { lang } = Astro.params;
export const prerender = true;
---

<Layout title='Vitrail' showReturn returnTo={`/vitrail`}>
    <AllProjectsLists lang={lang} enterIndex={false} />

    <AccordionReadProject
        lang={lang}
        client:only
        transition:persist
        year={vitrail?.year || 'Année non disponible'}
        description={vitrail?.description || 'Description non disponible'}
        technique={vitrail?.technique || 'Technique non disponible'}
        materials={vitrail?.materials || 'Matériaux non disponibles'}
        width={vitrail?.width || 'Largeur non disponible'}
        height={vitrail?.height || 'Hauteur non disponible'}
    />
    <PreviewImg
        transition:name='preview-image'
        transition:persist
        client:only
    />
    <div
        class='fixed top-0 left-0 w-screen h-screen'
        transition:persist
    >
        {vitrail?.medias? (
            <Slider client:only medias={vitrail.medias} zoomImg={vitrail.zoomImg || []} noTimeOut={false} />
        ) : (
            <ZoomModale client:only hidden={false} zoomImg={vitrail.zoomImg || []} />
        )}
    </div>
</Layout>
