---
//pages/[lang]/painting/[slug].astro

import fetchApi from '../../../assets/scripts/lib/strapi.js';

import Layout from '../../../layouts/Layout.astro';
import AllProjectsLists from '../../../layouts/AllProjectsLists.astro';
import PreviewImg from '../../../components/features/preview-image/PreviewImg.jsx';
import AccordionReadProject from '../../../components/features/accordion-project/AccordionReadProject.jsx';
import Slider from '../../../components/features/slider/Slider.jsx';

export async function getStaticPaths() {
    const languages = ['fr', 'en'];
    const paths = [];

    for (const lang of languages) {
        try {
            const paintings = await fetchApi({
                endpoint: 'paintings?populate=*',
                wrappedByKey: 'data',
                locale: lang,
            });

            if (!Array.isArray(paintings)) {
                console.error(
                    'Les données reçues ne sont pas un tableau:',
                    paintings
                );
                continue;
            }

            const langPaths = paintings.map((painting) => ({
                params: {
                    lang,
                    slug: painting.slug,
                },
                props: { painting },
            }));

            paths.push(...langPaths);
        } catch (error) {
            console.error(`Error fetching paintings for ${lang}:`, error);
        }
    }

    return paths;
}

const { painting } = Astro.props;
const { lang } = Astro.params;

export const prerender = true;
---

<Layout title='Painting' showReturn returnTo={`/painting`}>

    <AllProjectsLists lang={lang} enterIndex={false} />

    <AccordionReadProject
        description={painting?.description || 'Description non disponible'}
        technique={painting?.technique || 'Technique non disponible'}
        materials={painting?.materials || 'Matériaux non disponibles'}
        width={painting?.width || 'Largeur non disponible'}
        height={painting?.height || 'Hauteur non disponible'}
        year={painting?.year || 'Année non disponible'}
        lang={lang}
        client:load
    />
    <PreviewImg
        transition:name='preview-image'
        transition:persist
        client:only
    />
    <div class='fixed top-0 left-0 w-screen h-screen'>
        <Slider
            client:only
            medias={painting?.medias || []}
        />
    </div>
</Layout>
