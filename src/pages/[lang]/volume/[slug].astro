---
//pages/[lang]/volume/[slug].astro

import fetchApi from '../../../assets/scripts/lib/strapi.js';
import { fade } from 'astro:transitions';

import Layout from '../../../layouts/Layout.astro';
import AllProjectsLists from '../../../layouts/AllProjectsLists.astro';
import PreviewImg from '../../../components/features/preview-image/PreviewImg.jsx';
import AccordionReadProject from '../../../components/features/accordion-project/AccordionReadProject.jsx';
import Slider from '../../../components/features/slider/Slider.jsx';

export async function getStaticPaths() {
    const languages = ['fr', 'en'];
    const paths = [];

    for (const lang of languages) {
        try {
            const volumes = await fetchApi({
                endpoint: 'volumes?populate=*',
                wrappedByKey: 'data',
                locale: lang,
            });

            if (!Array.isArray(volumes)) {
                console.error(
                    'Les données reçues ne sont pas un tableau:',
                    volumes
                );
                continue;
            }

            const langPaths = volumes.map((volume) => ({
                params: {
                    lang,
                    slug: volume.slug,
                },
                props: { volume },
            }));

            paths.push(...langPaths);
        } catch (error) {
            console.error(`Error fetching volumes for ${lang}:`, error);
        }
    }

    return paths;
}


const { volume } = Astro.props;
const { lang } = Astro.params;

export const prerender = true;
---

<Layout title='Volume' showReturn returnTo={`/volume/`}>
    <AllProjectsLists lang={lang} enterIndex={false} />


    <AccordionReadProject
        lang={lang}
        year={volume?.year || 'Année non disponible'}
        client:load
        description={volume?.description || 'Description non disponible'}
        technique={volume?.technique || 'Technique non disponible'}
        materials={volume?.materials || 'Matériaux non disponibles'}
        width={volume?.width || 'Largeur non disponible'}
        height={volume?.height || 'Hauteur non disponible'}
    />
    <PreviewImg
        transition:name='preview-image'
        transition:persist
        client:only
    />
    <div class='fixed top-0 left-0 w-screen h-screen'>
        <Slider
            client:only
            medias={volume?.medias || []}
            transition:animate={fade({ duration: '0.4s' })}
        />
    </div>
</Layout>
